/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Employee.EmployeeDirectory;
import Business.Restaurant.MenuItem;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sethu
 */
public class CreateRestaurant_2 extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    Restaurant restaurant;
    /**
     * Creates new form CreateRestaurant_2
     */
    public CreateRestaurant_2(JPanel userProcessContainer,EcoSystem ecosystem, Restaurant restaurant) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ecosystem=ecosystem;
        this.restaurant = restaurant;
        
        populateInfo(restaurant.getName());
        populateMenuTable(restaurant.getMenu());
        populateAdminTable(ecosystem.getEmployeeDirectory());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtName = new javax.swing.JTextField();
        btnEditItem = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        btnAddMenuItem = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        title1 = new javax.swing.JLabel();
        title2 = new javax.swing.JLabel();
        btnAddAdmin = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        adminTable = new javax.swing.JTable();
        btnDeleteAdmin = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 104, 195, 30));

        btnEditItem.setForeground(new java.awt.Color(0, 51, 204));
        btnEditItem.setText("üëÅÔ∏è View / Edit Item");
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });
        add(btnEditItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 366, -1, -1));

        btnDeleteItem.setForeground(new java.awt.Color(255, 51, 51));
        btnDeleteItem.setText("üóëÔ∏èDelete Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });
        add(btnDeleteItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(529, 366, -1, -1));

        title.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(0, 102, 102));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("VIEW RESTAURANT");
        add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 52, 800, 41));

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("Name : ");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 104, 96, 30));

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Quantity", "Cost"
            }
        ));
        jScrollPane1.setViewportView(menuTable);
        if (menuTable.getColumnModel().getColumnCount() > 0) {
            menuTable.getColumnModel().getColumn(1).setHeaderValue("Description");
            menuTable.getColumnModel().getColumn(2).setHeaderValue("Quantity");
            menuTable.getColumnModel().getColumn(3).setHeaderValue("Cost");
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 216, 800, 139));

        btnAddMenuItem.setForeground(new java.awt.Color(0, 51, 204));
        btnAddMenuItem.setText("‚ûï Add New Item");
        btnAddMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMenuItemActionPerformed(evt);
            }
        });
        add(btnAddMenuItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(675, 140, -1, -1));

        btnBack.setForeground(new java.awt.Color(255, 51, 51));
        btnBack.setText("üîô Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        title1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        title1.setForeground(new java.awt.Color(0, 102, 102));
        title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title1.setText("MENU ITEMS");
        add(title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 169, 800, 41));

        title2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        title2.setForeground(new java.awt.Color(0, 102, 102));
        title2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title2.setText("RESTAURANT ADMINS");
        add(title2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 486, 800, 41));

        btnAddAdmin.setForeground(new java.awt.Color(0, 51, 204));
        btnAddAdmin.setText("‚ûï Add New Admin");
        btnAddAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAdminActionPerformed(evt);
            }
        });
        add(btnAddAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 452, -1, -1));

        adminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Name"
            }
        ));
        jScrollPane2.setViewportView(adminTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 533, 800, 193));

        btnDeleteAdmin.setForeground(new java.awt.Color(255, 51, 51));
        btnDeleteAdmin.setText("üóëÔ∏è Delete Admin");
        btnDeleteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAdminActionPerformed(evt);
            }
        });
        add(btnDeleteAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(683, 744, -1, -1));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 415, 800, 10));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        populateInfo(restaurant.getName());
        populateMenuTable(restaurant.getMenu());
        populateAdminTable(ecosystem.getEmployeeDirectory());
    }//GEN-LAST:event_formComponentShown

    private void btnAddMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMenuItemActionPerformed
        // TODO add your handling code here:
        CreateMenuItem newMenuItem = new CreateMenuItem(userProcessContainer, ecosystem, restaurant, null);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("CreateMenuItem", newMenuItem);
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddMenuItemActionPerformed

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = menuTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)menuTable.getModel();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this,"Select a Row to view / Edit");
            return;
        } else {
            MenuItem selectedMenuItem = (MenuItem) model.getValueAt(selectedRowIndex, 0);
            CreateMenuItem myMenuItem = new CreateMenuItem(userProcessContainer, ecosystem, restaurant, selectedMenuItem);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("myMenuItem", myMenuItem);
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnEditItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = menuTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)menuTable.getModel();
        MenuItem selectedMenuItem = (MenuItem) model.getValueAt(selectedRowIndex, 0);
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this,"Select a Row to Delete");
            return;
        } else {
            // @to-do: cancel all the existing orders for this menuItem
            restaurant.getMenu().remove(selectedMenuItem);
            populateMenuTable(restaurant.getMenu()); // refresh the list
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnAddAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAdminActionPerformed
        // TODO add your handling code here:
        CreateAdminUser newAdminUserPanel = new CreateAdminUser(userProcessContainer, ecosystem, restaurant);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("newAdminUserPanel", newAdminUserPanel);
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddAdminActionPerformed

    private void btnDeleteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAdminActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)adminTable.getModel();
        int index = adminTable.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Select a user to delete");
            return;
        } else {
            // remove from employee directory
            // remove from userAccount based on name
            Employee selectedEmployee = (Employee) model.getValueAt(index, 0);
            UserAccount AccountToRemove = null;
            for (UserAccount ua: ecosystem.getUserAccountDirectory().getUserAccountList()) {
                if (ua.getUsername() != null  && ua.getUsername().equals(selectedEmployee.getName())) {
                    AccountToRemove = ua;
                }
            }
            if (AccountToRemove != null) {
                ecosystem.getUserAccountDirectory().removeUserAccount(AccountToRemove); //as employee name is same as username in useraccount
                ecosystem.getEmployeeDirectory().removeEmployee(selectedEmployee); // delete employee from employee directory  
                populateAdminTable(ecosystem.getEmployeeDirectory());
            }
        }
    }//GEN-LAST:event_btnDeleteAdminActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable adminTable;
    private javax.swing.JButton btnAddAdmin;
    private javax.swing.JButton btnAddMenuItem;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteAdmin;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable menuTable;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel title2;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void populateMenuTable(ArrayList<MenuItem> menu) {
        DefaultTableModel model = (DefaultTableModel)menuTable.getModel();
        model.setRowCount(0);
        
        for(MenuItem p:menu) {
           Object[] row = new Object[4];
           row[0] = p;
           row[1] = p.getDescription();
           row[2] = p.getQuantity();
           row[3] = p.getCost();
           
           model.addRow(row);
        }
    }

    private void populateInfo(String name) {
        txtName.setText(name);
        txtName.setEditable(false);
    }

    private void populateAdminTable(EmployeeDirectory employeeDirectory) {
        DefaultTableModel model = (DefaultTableModel)adminTable.getModel();
        model.setRowCount(0);
        
        for(Employee p:employeeDirectory.getEmployeeList()) {
            if (p.getCompanyName() != null && p.getCompanyName().toLowerCase().equals(restaurant.getName().toLowerCase())) {
             Object[] row = new Object[1];
             row[0] = p;
           
             model.addRow(row);
            }
        }
    }

}
