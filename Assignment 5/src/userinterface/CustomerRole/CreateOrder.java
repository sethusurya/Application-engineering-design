/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Order.Order;
import Business.Restaurant.MenuItem;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author sethu
 */
public class CreateOrder extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount account;
    /**
     * Creates new form CreateOrder
     */
    public CreateOrder(JPanel userProcessContainer,EcoSystem ecosystem, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.account = account;
        
        populateRestaurants(ecosystem.getRestaurantDirectory());
        menuMenuItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[0]));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        lblRestaurant = new javax.swing.JLabel();
        menuRestaurant = new javax.swing.JComboBox<>();
        lblMenuItem = new javax.swing.JLabel();
        menuMenuItem = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblCost = new javax.swing.JLabel();
        inpCost = new javax.swing.JLabel();
        inpQuantity = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();

        title.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Create New Order");

        lblRestaurant.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRestaurant.setText("Restaurant :");

        menuRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        menuRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRestaurantActionPerformed(evt);
            }
        });

        lblMenuItem.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMenuItem.setText("Menu Item :");

        menuMenuItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        menuMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMenuItemActionPerformed(evt);
            }
        });

        btnSave.setText("Place Order");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblCost.setText("Cost ($) : ");

        inpCost.setText("<Cost>");

        inpQuantity.setText("<Quantity>");

        lblQuantity.setText("Quantity (lbs) : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancel)
                                .addGap(131, 131, 131)
                                .addComponent(btnSave))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(menuMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(menuRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCost, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inpCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inpQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))))
                .addContainerGap(215, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCost, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addGap(0, 285, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        // Create order Time
        // Form an object and save it
        String restaurantName = menuRestaurant.getSelectedItem().toString();
        String menuItemName = menuMenuItem.getSelectedItem().toString();
        Restaurant selectedRestaurant = ecosystem.getRestaurantDirectory().findRestaurant(restaurantName);
        MenuItem selectedMenuItem = selectedRestaurant.findMenuItem(menuItemName);
        ArrayList<String> itemList = new ArrayList<String>();
        if (!restaurantName.equals("") && !menuItemName.equals("") && selectedMenuItem != null) {
          itemList.add(selectedMenuItem.getName());
          Order myNewOrder = new Order();
          myNewOrder.setRestaurantName(restaurantName);
          myNewOrder.setCustomerName(account.getUsername());
          myNewOrder.setOrderTime(new Date());
          myNewOrder.setOrderList(itemList);
          myNewOrder.setStatus("Initialized");
          System.out.print(myNewOrder);
          
          // add this order to system
          ecosystem.getOrderDirectory().addOrder(myNewOrder);
          goBack();
        } else {
            JOptionPane.showMessageDialog(this, "Select Restaurant and Menu item to place an order");
            return;
        }  
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        menuRestaurant.setSelectedItem("");
        menuMenuItem.setSelectedItem("");
        goBack();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void menuRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRestaurantActionPerformed
        // TODO add your handling code here:
        String restaurantNameTemp = menuRestaurant.getSelectedItem().toString();
        if (restaurantNameTemp.equals("")) {
            // empty the list
            menuMenuItem.setSelectedItem("");
        } else {
            Restaurant selectedRestaurant = new Restaurant();
            for (Restaurant r: ecosystem.getRestaurantDirectory().getRestaurantDirectory()){
                if (r.getName().equals(restaurantNameTemp)) {
                    selectedRestaurant = r;
                }
            }
            populateMenu(selectedRestaurant);
        }
    }//GEN-LAST:event_menuRestaurantActionPerformed

    private void menuMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMenuItemActionPerformed
        // TODO add your handling code here:
        String menuItemTemp = menuMenuItem.getSelectedItem().toString();
        String restaurantNameTemp = menuRestaurant.getSelectedItem().toString();
        String cost = "0.0";
        String quantity = "0.0";
        if (restaurantNameTemp.equals("")) {
            // empty the list
        } else {
            Restaurant selectedRestaurant = new Restaurant();
            MenuItem selectedMenuItem = new MenuItem();
            for (Restaurant r: ecosystem.getRestaurantDirectory().getRestaurantDirectory()){
                if (r.getName().equals(restaurantNameTemp)) {
                    selectedRestaurant = r;
                }
            }
            for (MenuItem m: selectedRestaurant.getMenu()) {
                if (m.getName().equals(menuItemTemp)) {
                    selectedMenuItem = m;
                }
            }
//                cost = String.valueOf(selectedMenuItem.getCost());
//                quantity = String.valueOf(selectedMenuItem.getQuantity());
            try {
                cost = String.valueOf(selectedMenuItem.getCost());
                quantity = String.valueOf(selectedMenuItem.getQuantity());
                inpCost.setText(cost);
                inpQuantity.setText(quantity);
            }
            catch (Exception e){
                JOptionPane.showMessageDialog(this,"Error fetching Menu Item, Item might have been removed");
            }
        }
    }//GEN-LAST:event_menuMenuItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel inpCost;
    private javax.swing.JLabel inpQuantity;
    private javax.swing.JLabel lblCost;
    private javax.swing.JLabel lblMenuItem;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblRestaurant;
    private javax.swing.JComboBox<String> menuMenuItem;
    private javax.swing.JComboBox<String> menuRestaurant;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    private void populateRestaurants(RestaurantDirectory restaurantDirectory) {
        // do populate cost and Quantity
        inpCost.setText("0.0");
        inpQuantity.setText("0.0");
        // populate menu
        ArrayList<String> RestaurantsList = new ArrayList<String>();
        RestaurantsList.add("");
        for(Restaurant r: restaurantDirectory.getRestaurantDirectory()){
            RestaurantsList.add(r.getName());
        }
        String[] Restaurants = RestaurantsList.toArray(new String[0]);
        menuRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(Restaurants));
    }

    private void populateMenu(Restaurant selectedRestaurant) {
        // populate menu
        ArrayList<String> MenuList = new ArrayList<String>();
        MenuList.add("");
        for(MenuItem r: selectedRestaurant.getMenu()){
            MenuList.add(r.getName());
        }
        String[] myMenu = MenuList.toArray(new String[0]);
        menuMenuItem.setModel(new javax.swing.DefaultComboBoxModel<>(myMenu));
    }

    private void goBack() {
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }
}
