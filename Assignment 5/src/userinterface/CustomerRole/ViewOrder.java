/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Order.Order;
import Business.Restaurant.MenuItem;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author sethu
 */
public class ViewOrder extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount account;
    Order order;
    /**
     * Creates new form ViewOrder
     */
    public ViewOrder(JPanel userProcessContainer,EcoSystem ecosystem, UserAccount account, Order order) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.account = account;
        this.order = order;
        
        populateData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddComment = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        lblRestaurant = new javax.swing.JLabel();
        lblMenuItem = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblCost = new javax.swing.JLabel();
        inpCost = new javax.swing.JLabel();
        inpQuantity = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        txtRestaurant = new javax.swing.JTextField();
        txtMenuItem = new javax.swing.JTextField();
        txtOrderDate = new javax.swing.JTextField();
        lblOrderDate = new javax.swing.JLabel();
        txtDeliveryDate = new javax.swing.JTextField();
        lblDeliveryDate = new javax.swing.JLabel();
        txtDeliveryManName = new javax.swing.JTextField();
        lblDeliveryManName = new javax.swing.JLabel();
        txtComment = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAddComment.setForeground(new java.awt.Color(0, 51, 204));
        btnAddComment.setText("‚úî Ô∏èSave Comment");
        btnAddComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCommentActionPerformed(evt);
            }
        });
        add(btnAddComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 513, -1, -1));

        title.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(0, 102, 102));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("VIEW ORDER INFORMATION");
        add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 41, 800, 48));

        lblRestaurant.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRestaurant.setText("Restaurant :");
        add(lblRestaurant, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 153, 97, 26));

        lblMenuItem.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMenuItem.setText("Menu Item :");
        add(lblMenuItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 196, 97, 26));

        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("üîô Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lblCost.setText("Cost ($) : ");
        add(lblCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(374, 386, 66, 22));

        inpCost.setText("<Cost>");
        add(inpCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 390, 82, -1));

        inpQuantity.setText("<Quantity>");
        add(inpQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 418, 82, -1));

        lblQuantity.setText("Quantity (lbs) : ");
        add(lblQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 414, 88, 22));

        txtRestaurant.setEditable(false);
        add(txtRestaurant, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 150, 220, 32));

        txtMenuItem.setEditable(false);
        add(txtMenuItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 193, 220, 32));

        txtOrderDate.setEditable(false);
        add(txtOrderDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 236, 220, 32));

        lblOrderDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOrderDate.setText("Order Date :");
        add(lblOrderDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 239, 97, 26));

        txtDeliveryDate.setEditable(false);
        add(txtDeliveryDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 284, 220, 32));

        lblDeliveryDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeliveryDate.setText("Delivery Date :");
        add(lblDeliveryDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 287, 97, 26));

        txtDeliveryManName.setEditable(false);
        add(txtDeliveryManName, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 336, 220, 32));

        lblDeliveryManName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeliveryManName.setText("Delivered By : ");
        add(lblDeliveryManName, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 339, 113, 26));
        add(txtComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 463, 460, 44));

        txtStatus.setEditable(false);
        add(txtStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 107, 220, 32));

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStatus.setText("Status : ");
        add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 110, 97, 26));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAddCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCommentActionPerformed
        // TODO add your handling code here:
        String comment = txtComment.getText();
        Order myNewOrder = order;
        myNewOrder.setComment(comment);
        int index = -1;
        for (int i = 0; i < ecosystem.getOrderDirectory().getOrderDirectory().size(); i++) {
            Order tempOrder = ecosystem.getOrderDirectory().getOrderDirectory().get(i);
            Order tempOrder2 = order;
            if (tempOrder2.getCustomerName().equals(tempOrder.getCustomerName()) && tempOrder2.getOrderTime().equals(tempOrder.getOrderTime())) {
                index = i;
            }
        }
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Unable to add comment");
            return;
        } else {
            ecosystem.getOrderDirectory().modifyOrder(index, myNewOrder); // add comment to order
            goBack();
        }
    }//GEN-LAST:event_btnAddCommentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddComment;
    private javax.swing.JLabel inpCost;
    private javax.swing.JLabel inpQuantity;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblCost;
    private javax.swing.JLabel lblDeliveryDate;
    private javax.swing.JLabel lblDeliveryManName;
    private javax.swing.JLabel lblMenuItem;
    private javax.swing.JLabel lblOrderDate;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblRestaurant;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtComment;
    private javax.swing.JTextField txtDeliveryDate;
    private javax.swing.JTextField txtDeliveryManName;
    private javax.swing.JTextField txtMenuItem;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtRestaurant;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    private void populateData() {
        // fill the text fields
        String RestaurantName = "N/A";
        String MenuItemName = "N/A";
        String orderDate = "N/A";
        String deliveryDate = "N/A";
        String deliveryMan = "N/A";
        String Status = "N/A";
        String Cost = "N/A";
        String Quantity = "N/A";
        String comment = "";
        MenuItem myMenuItem = new MenuItem();
        Restaurant myRestaurant = new Restaurant();
        if (order.getRestaurantName() != null) {
            RestaurantName = order.getRestaurantName();
        }
        if (order.getOrderList().size() == 1) {
            myRestaurant = ecosystem.getRestaurantDirectory().findRestaurant(RestaurantName);
            if (myRestaurant != null) {
                MenuItemName = order.getOrderList().get(0);
                myMenuItem = myRestaurant.findMenuItem(MenuItemName);
                if (myMenuItem != null){
                 Cost = String.valueOf(myMenuItem.getCost());
                 Quantity = String.valueOf(myMenuItem.getQuantity());   
                }
            }
        }
        if (order.getOrderTime() != null) {
            orderDate = order.getOrderTime().toString();
        }
        if (order.getDeliveryTime() != null) {
            deliveryDate = order.getDeliveryTime().toString();
        }
        if (order.getDeliveryManName() != null) {
            deliveryMan = order.getDeliveryManName();
        }
        if (order.getStatus() != null){
            Status = order.getStatus();
        }
        if (order.getComment() != null) {
            comment = order.getComment();
        }
        
        txtRestaurant.setText(RestaurantName);
        txtMenuItem.setText(MenuItemName);
        txtOrderDate.setText(orderDate);
        txtDeliveryDate.setText(deliveryDate);
        txtDeliveryManName.setText(deliveryMan);
        inpCost.setText(Cost);
        inpQuantity.setText(Quantity);
        txtComment.setText(comment);
        txtStatus.setText(Status);
    }

    private void goBack() {
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }
}
